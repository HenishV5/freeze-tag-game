"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class agents(object):

    __slots__ = ["uuid", "id", "position", "freeze"]

    __typenames__ = ["string", "double", "double", "boolean"]

    __dimensions__ = [None, None, [2], None]

    def __init__(self):
        self.uuid = ""
        """ LCM Type: string """
        self.id = 0.0
        """ LCM Type: double """
        self.position = [ 0.0 for dim0 in range(2) ]
        """ LCM Type: double[2] """
        self.freeze = False
        """ LCM Type: boolean """

    def encode(self):
        buf = BytesIO()
        buf.write(agents._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __uuid_encoded = self.uuid.encode('utf-8')
        buf.write(struct.pack('>I', len(__uuid_encoded)+1))
        buf.write(__uuid_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.id))
        buf.write(struct.pack('>2d', *self.position[:2]))
        buf.write(struct.pack(">b", self.freeze))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != agents._get_packed_fingerprint():
            raise ValueError("Decode error")
        return agents._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = agents()
        __uuid_len = struct.unpack('>I', buf.read(4))[0]
        self.uuid = buf.read(__uuid_len)[:-1].decode('utf-8', 'replace')
        self.id = struct.unpack(">d", buf.read(8))[0]
        self.position = struct.unpack('>2d', buf.read(16))
        self.freeze = bool(struct.unpack('b', buf.read(1))[0])
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if agents in parents: return 0
        tmphash = (0x801ed6d023d6dff9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if agents._packed_fingerprint is None:
            agents._packed_fingerprint = struct.pack(">Q", agents._get_hash_recursive([]))
        return agents._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", agents._get_packed_fingerprint())[0]

